{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/clicks/Documents/Apps/hoplist-web/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// import App from 'next/app'\nimport Layout from \"../components/Layout\";\nimport { ToastProvider } from 'react-toast-notifications';\nimport '../theme/style.scss';\nimport ToastDisplay from \"../components/Toast\";\n\nfunction MyApp(_ref) {\n  var Component = _ref.Component,\n      pageProps = _ref.pageProps;\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }, __jsx(ToastProvider, {\n    autoDismiss: true,\n    autoDismissTimeout: 3000,\n    components: {\n      Toast: ToastDisplay\n    },\n    placement: \"top-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 14\n    }\n  }))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\n_c = MyApp;\nexport default MyApp;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyApp\");","map":{"version":3,"sources":["/Users/clicks/Documents/Apps/hoplist-web/pages/_app.js"],"names":["Layout","ToastProvider","ToastDisplay","MyApp","Component","pageProps","Toast"],"mappings":";;;;AAAA;AAEA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,SAASC,aAAT,QAA8B,2BAA9B;AAGA,OAAO,qBAAP;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;AAEA,SAASC,KAAT,OAAyC;AAAA,MAAxBC,SAAwB,QAAxBA,SAAwB;AAAA,MAAbC,SAAa,QAAbA,SAAa;AACrC,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,aAAD;AACA,IAAA,WAAW,MADX;AAEA,IAAA,kBAAkB,EAAE,IAFpB;AAGA,IAAA,UAAU,EAAE;AAAEC,MAAAA,KAAK,EAAEJ;AAAT,KAHZ;AAIA,IAAA,SAAS,EAAC,YAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMC,MAAC,SAAD,eAAeG,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAND,CADJ,CADJ;AAYD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;KAzBOF,K;AA2BP,eAAeA,KAAf","sourcesContent":["// import App from 'next/app'\n\nimport Layout from \"../components/Layout\"\nimport { ToastProvider } from 'react-toast-notifications';\n\n\nimport '../theme/style.scss';\nimport ToastDisplay from \"../components/Toast\";\n\nfunction MyApp({ Component, pageProps }) {\n    return (\n        <Layout>\n            <ToastProvider\n            autoDismiss\n            autoDismissTimeout={3000}\n            components={{ Toast: ToastDisplay }}\n            placement=\"top-center\"\n            >\n             <Component {...pageProps} />\n            </ToastProvider>\n        </Layout>\n    )\n  }\n  \n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // MyApp.getInitialProps = async (appContext) => {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //\n  //   return { ...appProps }\n  // }\n  \n  export default MyApp"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Head from 'next/head';\nimport { Container, Row, Col, Button, Alert } from 'reactstrap';\nimport { faHeart, faCommentAlt, faCalendar, faClock } from '@fortawesome/free-regular-svg-icons';\nimport { faShare, faShareAlt, faShieldAlt, faShieldVirus, faSearchLocation, faMapMarked, faMapMarkedAlt, faMapPin, faMapMarker, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport Icon from '../../components/Icon';\nimport ShareModal from '../../components/ShareModal';\nimport DownloadBtns from '../../components/DownloadBtns';\nimport Avatar from 'react-avatar';\nimport Rave from 'react-flutterwave-rave';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport JoinForm from '../../components/JoinForm';\nimport ShieldCheckIcon from 'mdi-react/ShieldCheckIcon';\nimport moment from 'moment';\nimport axios from '../../utils/axios';\nimport Share from '../../components/Share';\nimport SocialLinks from '../../components/SocialLinks';\nexport default function Home({\n  data\n}) {\n  console.log({\n    data\n  });\n\n  if (!data.status) {\n    return __jsx(\"div\", null, \"An error occured\");\n  }\n\n  const activity = data.data;\n  return __jsx(\"div\", {\n    className: \"activity-details\"\n  }, activity.images.length > 0 && __jsx(\"div\", {\n    className: \"activity-image\",\n    style: {\n      backgroundImage: \"url('\" + activity.images[0] + \"')\"\n    }\n  }), __jsx(\"h4\", {\n    class: \"mt-4\"\n  }, \"You are invited to join\"), __jsx(\"h1\", {\n    className: \"activity-title mb-4\"\n  }, activity.title), __jsx(Row, null, __jsx(Col, {\n    md: 6\n  }, __jsx(\"div\", {\n    class: \"date-time\"\n  }, __jsx(Icon, {\n    icon: faCalendar\n  }), \" \\xA0 \\xA0 \", moment(activity.dateTime).format('dddd, MMM DD - HH:MMA')), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(\"h4\", null, \"About this activity\"), __jsx(\"p\", null, activity.description), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Row, null, __jsx(Col, {\n    md: 2\n  }, __jsx(Avatar, {\n    size: \"80\",\n    color: \"#FC4A1A\",\n    src: activity.user.profileImage,\n    round: true,\n    name: `${activity.user.firstName} ${activity.user.lastName}`\n  })), __jsx(Col, {\n    md: \"1\"\n  }), __jsx(Col, null, __jsx(\"br\", null), __jsx(\"h3\", null, `${activity.user.firstName} ${activity.user.lastName}`), __jsx(\"span\", {\n    className: \"text-gray\"\n  }, \"Creator\"))), __jsx(\"hr\", null), __jsx(\"h4\", null, \"Share with friends\"), __jsx(\"p\", null, \"You can share this activity with your friends via:\"), __jsx(Share, {\n    url: `https://hoplist.co/activity/${activity._id}`\n  })), __jsx(Col, {\n    md: 6\n  }, __jsx(JoinForm, {\n    activity_id: activity._id\n  }))), __jsx(\"hr\", null), __jsx(\"div\", {\n    className: \"footer\"\n  }, __jsx(\"h2\", null, \"Try something new with your community today\"), __jsx(\"p\", null, \"Download the App\"), __jsx(DownloadBtns, {\n    inverse: true\n  })), __jsx(\"div\", {\n    class: \"m-4\"\n  }, __jsx(Row, null, __jsx(Col, {\n    md: \"10\"\n  }, __jsx(\"a\", {\n    href: \"https://hoplist.co/privacy.html\",\n    className: \"text-dark mr-3\"\n  }, \"Privacy\"), __jsx(\"a\", {\n    href: \"#\",\n    className: \"text-dark\"\n  }, \"Terms of use\")), __jsx(Col, {\n    md: \"2\"\n  }, __jsx(SocialLinks, null)))));\n}\nexport async function getStaticProps(ctx) {\n  const res = await axios(`/activities/${ctx.params.id}`);\n  const json = await res.data;\n  return {\n    props: {\n      data: json\n    }\n  };\n} // This function gets called at build time\n\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await axios('/activities');\n  const activities = await res.data.data;\n  console.log(res); // Get the paths we want to pre-render based on posts\n\n  const paths = activities.length > 0 && activities.map(activity => ({\n    params: {\n      id: activity._id\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n}","map":null,"metadata":{},"sourceType":"module"}